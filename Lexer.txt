TYPE : int
ID : n
ASSIGN : =
NUM : 1
SEMI : ;
TYPE : int
ID : sum
PAREN_OP : (
TYPE : int
ID : a
TYPE : int
ID : b
PAREN_CL : )
CURL_OP : {
RETURN : return
ID : a
PLUS : +
ID : b
SEMI : ;
CURL_CL : }
TYPE : char *
ID : s
PAREN_OP : (
PAREN_CL : )
CURL_OP : {
RETURN : return
STRING : aman
SEMI : ;
CURL_CL : }
TYPE : int
ID : main
PAREN_OP : (
TYPE : int
ID : argc
TYPE : char *
ID : argv
SQ_OP : [
SQ_CL : ]
PAREN_CL : )
CURL_OP : {
TYPE : int
ID : a
ASSIGN : =
PAREN_OP : (
ID : b
PLUS : +
ID : c
PAREN_CL : )
MULTIPLY : *
NUM : 5
SEMI : ;
TYPE : int
ID : b
ASSIGN : =
ID : a
PLUS : +
NUM : 1
SEMI : ;
TYPE : char *
ID : s
ASSIGN : =
STRING : aman
SEMI : ;
TYPE : int
ID : c
ASSIGN : =
NUM : 0
SEMI : ;
COND_ST : if
PAREN_OP : (
ID : a
EQUAL : ==
ID : b
PAREN_CL : )
CURL_OP : {
ID : c
ASSIGN : =
NUM : 1
SEMI : ;
CURL_CL : }
COND_ST : else
CURL_OP : {
ID : c
ASSIGN : =
NUM : 2
SEMI : ;
CURL_CL : }
TYPE : int
ID : x
ASSIGN : =
ID : sum
PAREN_OP : (
ID : d
ID : n
